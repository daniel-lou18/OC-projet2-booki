- englober, entourer de, encapsuler dans ... des balises

<HTML>
dans le head nous avons entre autres les métadonnées, le titre de la page, les balises link pour importer la police Google Font et les icônes (FA importé comme une feuille de style css), la balise link de type stylesheet pour importer notre feuille de style CSS à l'aide de l'attribut href qui précise l'emplacement du fichier

dans le body nous avons 1 div main-container qui regroupe tout le contenu, 3 enfants directs :

- header : l'en-tête
	1  a qui contient une img avec le logo
	2  nav : menu de navigation avec deux liens
		> ul > li (éléments de liste) > a (élément d'ancre)
- main : contenu principal
	1 section pour la fonctionnalité recherche, c'est à dire la barre de recherche plus les filtres
		> form pour la barre de recherche
			> label avec l'attribut for pour lier la balise à la balise input : quand on clique sur l'icône >>> place le focus sur le champ de saisie
			> input pour le champ de saisie avec l'attribut id qui correspond à l'attribut for du label
			> bouton pour l'envoi du formulaire : par défaut de type "submit" dans un form
		> div pour regrouper les buttons filtres
? regrouper les filtres dans un ul et les mettre chacun dans un li ?
	
	2 div regroupant les sections hébergements et populaires
		A section hébergements
			> div qui regroupe les cards
				> a > article
					> img
					> div regroupant le contenu:
						> texte
						> div regroupant les 5 icônes du classement par étoiles
		B section populaires

	3 section activités
		> div
			> a > article
				> img
				> titre h3

- footer : pied de page
	3 menu div qui comprennent :
		> titre h3
		> liste non ordonnée
			> li > a
		
<CSS>

- reset : enlever les marges et les rembourrages et surtout box-sizing : border-box
les largeurs et les hauteurs des éléments restent telles qu'elles sont définies quand on ajoute du padding et des bordures. Autrement dit, les bordures et le padding sont inclus dans le calcul : border + padding + content. 
La valeur par défaut est content-box, c'est à dire que le padding et la border sont exclues du calcul de la hauteur ou de la largeur, qu'ils ne sont pas pris en compte.

- élément racine (correspond à l'élément html) préséance sur la balise html: définir les variables CSS pour les couleurs et les tailles de police
- main-container:
	- largeur maximale
	- rembourrage à gauche et à droite
- a : enlever le soulignement par défaut
- li : enlever le point avant chaque balise li avec list-style none

- d'abord nous avons les classes prédéfinies
- la classe .card : effet quand on survole, transform scale et une ombre plus foncée avec une petite transition
	offset Y plus large (la hauteur de l'ombre, sur l'axe verticale, valeur positive donc en bas) et couleur plus opaque, taille du blur reste la même
	> img : object-fit cover, le ratio entre la largeur et la hauteur d'origine est maintenu quand on définit une largeur ou une hauteur, donc l'image sera rogné mais on peut l'aligner avec la propriété object-position


<Header>
Display flex et justify content space-between pour mettre le logo à gauche et le menu de navigation à droite
- Balise a qui entoure la balise img: hauteur fixe et du padding top et bottom (hauteur est la somme de la hauteur de l'image + 2 fois le padding:
	> img : hauteur fixe et max-width: 100% pour que l'image ne soit pas plus large que son parent et garde ses proportions
- Balise nav contient le menu de navigation: une liste non ordonnée .navbar-list display: flex et un gap
	> balises li qui entourent chacune une balise a .navbar-link:
		-  ayant un display flex pour aligner le contenu, c'est à dire le texte par rapport à la bordure: align-items end pour positionner le texte en bas
		- définir deux bordures : celle du haut et celle du bas, on lui donne une couleur transparante. En version desktop c'est la bordure du haut qui va devenir bleue au survol et en version mobile c'est la bordure du bas qui va devenir bleue. D'ailleurs en version mobile l'attribut align-items sera start pour bien positionner le texte en haut et donc de créer de l'espace entre le texte et la bordure colorée

<Section search>
- Form: display flex flex-direction column : aligner les enfants à gauche (start) et mettre un gap
	> la balise label entoure l'icone localisation:
		- bordures de gauche arrondies
		- largeur et hauteur fixes
		- display flex pour bien centrer l'icone horizontalement et verticalement
		- couleur de fond est plus foncée quand on survole
	> on met une bordure grise sur la balise input (même couleur que la couleur de fond de l'icône
	> le bouton : 
		- bordures de droite arrondies
		- border none pour enlever la bordure par défaut noire moche
		- couleur de fond plus claire quand on survole
		- la pseudo classe active : effet quand on clique sur le bouton
- Filtres: display flex pour aligner horizontalement le titre et les boutons, align-items center pour bien les aligner verticalement
	> balise div entoure les boutons:
		> bouton: display flex pour aligner horizontalement l'icône et le texte et align-items center pour mettre les deux enfants bien au milieu du bouton.
		Couleur de fond change au survol et une bordure bleue est visible quand on active le bouton
			> span entoure l'icone font awesome: l'élément button est un élément inline donc il est préférable de mettre une balise span à l'intérieur. On définit un font-size pour changer la taille de l'icone
	> Idem pour l'icone informations 

<Hébergement et populaires>
Div qui regroupe les deux sections hébergements et populaires: display flex et space-between pour avoir la section hébergements à gauche et la section populaire à droite. Le sélecteur de type (de balise) cible les deux sections enfant: pour mettre une couleur de fond grise. Les sections qui ne sont pas des éléments enfants de la classe .hebergements-and-populaires n'ont pas de couleur de fond grise.

Section hebergements
	> La balise div avec la classe .hebergements-cards est le conteneur des cards: display-flex, l'attribut flex-wrap avec une valeur de 'wrap'. On met une marge en haut et en bas mais pas sur les côtés car il y a le padding-left du parent qui crée de l'espace à gauche et le gap sur le dernier élément de la ligne qui crée de l'espace côté droit.
		> chaque card correspond à une balise article avec la classe .card. Chaque balise article est contenu dans une balise a. On va bien préciser la largeur de la balise d'ancre
			> l'image est un enfant direct de la carte: 
				- hauteur fixe et une largeur égale à la largeur du parent. La propriété object-fit avec une valeur de "cover" est automatiquement appliquée. Les proportions de l'image d'origine sont respectées et l'image est rognée (on ne voit qu'une partie de l'image d'origine)

Section activités
	> activites-cards a: on définit l'attribut flex avec une valeur de 1 : chaque carte a la même largeur
		> la classe .card cible la balise article: 
			- overflow hidden pour que les border-radius s'affichent correctement
			- display flex avec flex-direction column pour aligner l'image et le titre sur l'axe vertical
			- justify-content flex-end pour aligner le titre à droite sur l'axe horizontal

<Footer>
J'ai mis le footer à l'extérieur du conteneur main-container et j'ai créé un conteneur footer-container qui prend 100% de largeur du body. Donc j'ai dû enlever le display flex du body. Ainsi j'ai pu mettre une couleur de fond grise qui couvre toute la largeur de l'écran en bas.

